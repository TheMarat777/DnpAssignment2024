@page "/postsdetails/{postId:int}"
@using System.Security.Claims
@using APIContracts
@using BlazorApp.Services
@inject IPostService PostService
@inject IUserService UserService

@if (isLoading)
{
    <p>Loading...</p>
}
else if (errorMessage != null)
{
    <p>Error: @errorMessage</p>
}
else
{
    <h3>Title: @postWithComments.Post.Title</h3>
    <p>Content: @postWithComments.Post.Content</p>
    <p><strong>Author ID:</strong> @postWithComments.Post.UserId</p>

    <h4>Add a Comment</h4>
    <input type="text" @bind="newCommentBody" placeholder="Write a comment..."/>
    <button @onclick="AddComment">Submit</button>

    <h4>Comments</h4>
    <ul>
        @foreach (var comment in postWithComments.Comments)
        {
            <li>@comment.Body</li>
            <p><em>By User ID: @comment.UserId</em></p>
        }
    </ul>
}

@code {
    [Parameter] public int postId { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> State { get; set; }

    private PostWithCommentsDTO postWithComments;
    private string newCommentBody;
    private int userId;
    private bool isLoading = true;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationState authenticationState = await State;
            ClaimsPrincipal claimsPrincipal = authenticationState.User;
            if (claimsPrincipal.Identity is null || !claimsPrincipal.Identity.IsAuthenticated)
            {
                Console.WriteLine("User is not authenticated");
                return;
            }
            IEnumerable<Claim> claims = claimsPrincipal.Claims;
            string userIdAsString = claims.Single(c => c.Type == "Id").Value;
            userId = int.Parse(userIdAsString);

            // Fetch the post
            postWithComments = new PostWithCommentsDTO
            {
                Post = await PostService.GetPostAsync(postId)
            };
            Console.WriteLine($"Fetched post: {postWithComments.Post.Title}");

            // Fetch the comments
            postWithComments.Comments = await PostService.GetCommentsAsync(postId);
            Console.WriteLine($"Fetched {postWithComments.Comments.Count} comments");

            isLoading = false;
            StateHasChanged(); // Ensure the UI is updated after data is loaded
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private async Task AddComment()
    {
        try
        {
            var newComment = new CreateCommentDto()
            {
                PostId = postId,
                Body = newCommentBody,
                UserId = userId
            };

            await PostService.AddCommentAsync(newComment);
            postWithComments.Comments = await PostService.GetCommentsAsync(postId);
            newCommentBody = string.Empty;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }
}