@page "/viewposts"
@using APIContracts
@using BlazorApp.Auth
@using BlazorApp.Services
@inject IPostService PostService
@inject IUserService UserService
@inject NavigationManager NavMgr
@inject AuthenticationStateProvider AuthProvider

@attribute [Authorize]

<PageTitle>View Posts</PageTitle>

<div class="view-posts-container">
    <button class="logout-button" @onclick="Logout">Log Out</button>

    @if (posts == null)
    {
        <p class="loading-text">Loading posts...</p>
    }
    else
    {
        <div class="posts-list">
            @foreach (var post in posts)
            {
                var username = usernames.ContainsKey(post.UserId) ? usernames[post.UserId] : "Unknown";
                <div class="post-item">
                    <h3 class="post-title">@post.Title</h3>
                    <p class="post-content">@post.Content</p>
                    <p class="post-author"><i>Posted by @username</i></p>
                    <button class="read-more-button" @onclick="() => ViewPostDetails(post.Id)">Read More</button>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<PostDto> posts;
    private Dictionary<int, string> usernames = new Dictionary<int, string>();
    

    protected override async Task OnInitializedAsync()
    {
        posts = (await PostService.GetPostsAsync()).ToList();
        foreach (var post in posts)
        {
            if (!usernames.ContainsKey(post.UserId))
            {
                var user = await UserService.GetUserAsync(post.UserId);
                usernames[post.UserId] = user.UserName;
            }
        }
    }

    private async Task Logout()
    {
        var authProvider = (SimpleAuthProvider)AuthProvider;
        await authProvider.Logout();
        NavMgr.NavigateTo("login");
    }

    private void ViewPostDetails(int postId)
    {
        NavMgr.NavigateTo($"/postsdetails/{postId}");
    }
    
}

<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    .view-posts-container {
        padding: 40px;
        background-color: #f9f9f9;
        height: 100vh;
        overflow-y: auto;
        position: relative;
    }

    .logout-button {
        background-color: white;
        color: red;
        position: absolute;
        top: 20px;
        right: 20px;
        font-size: 1rem;
        padding: 8px 16px;
        border-radius: 4px;
        border: 2px solid red;
        cursor: pointer;
        transition: background-color 0.3s ease;
        z-index: 10;
    }

    .logout-button:hover {
        background-color: red;
        color: white;
    }

    .loading-text {
        font-size: 1.2rem;
        color: #007bff;
        text-align: center;
        margin-top: 100px;
    }

    .posts-list {
        display: flex;
        flex-direction: column;
        gap: 20px;
        margin-top: 80px;
    }

    .post-item {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
    }

    .post-item:hover {
        transform: translateY(-5px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    }

    .post-title {
        font-size: 1.8rem;
        font-weight: 600;
        color: #007bff;
        margin-bottom: 10px;
    }

    .post-content {
        font-size: 1.1rem;
        color: #333;
        margin-bottom: 15px;
        line-height: 1.6;
    }

    .post-author {
        font-size: 1rem;
        color: #888;
        margin-bottom: 15px;
    }

    .read-more-button {
        background-color: #007bff;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 1rem;
        width: 100%;
        max-width: 200px;
        transition: background-color 0.3s;
    }

    .read-more-button:hover {
        background-color: #0056b3;
    }
</style>
