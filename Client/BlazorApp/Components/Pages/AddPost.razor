@page "/addpost"
@using APIContracts
@using BlazorApp.Auth
@using BlazorApp.Services
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavMgr
@inject IPostService PostService

@attribute [Authorize]

<PageTitle>Add Post</PageTitle>

<div class="post-container">
    <h1 class="page-title">Create a New Post</h1>

    <AuthorizeView>
        <Authorized>
            <div class="form-container">
                <label for="title" class="form-label">Title</label>
                <InputText id="title" class="form-control" @bind-Value="newPost.Title" />

                <label for="body" class="form-label">Body</label>
                <InputTextArea id="body" class="form-control" @bind-Value="newPost.Content" />

                @if (errorLabel != null)
                {
                <div class="alert alert-danger mt-3">@errorLabel</div>
                }
                @if (successMessage != null)
                {
                <div class="alert alert-success mt-3">@successMessage</div>
                }

                <button type="button" class="primary-button" @onclick="AddPostAsync">Add Post</button>
            </div>
        </Authorized>
        <NotAuthorized>
            <p>You must be logged in to create a post.</p>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    private string errorLabel;
    private string successMessage;
    private CreatePostDto newPost = new CreatePostDto();

    private async Task AddPostAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        errorLabel = "";
        successMessage = "";
        try
        {
            if (user.Identity.IsAuthenticated)
            {
                var userIdClaim = user.FindFirst("Id");
                if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int userId))
                {
                    newPost.UserId = userId; 
                    await PostService.AddPostAsync(newPost);
                }
                else
                {
                    errorLabel = "User ID is invalid.";
                }
            }
            else
            {
                errorLabel = "You need to be logged in to create a post.";
            }
        }
        catch (Exception e)
        {
            errorLabel = $"Error: {e.Message}";
            successMessage = null;
        }
    }

}

<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        overflow: hidden;
    }

    .post-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        height: 100vh;
        text-align: center;
        background-color: #f8f9fa;
        padding: 20px;
        padding-top: 50px;
        overflow: hidden;
    }

    .page-title {
        font-size: 3rem;
        color: #007bff;
        margin-bottom: 30px;
    }

    .label {
        font-weight: bold;
    }

    .form-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-top: 30px;
    }

    .input-field {
        padding: 8px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        width: 100%;
        max-width: 300px;
    }

    .primary-button {
        background-color: #007bff;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 1.1rem;
        width: 100%;
        max-width: 300px;
        margin-top: 10px;
    }

    .primary-button:hover {
        background-color: #0056b3;
    }

    .alert {
        font-size: 0.9rem;
        padding: 10px;
        border-radius: 4px;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
    }
</style>
